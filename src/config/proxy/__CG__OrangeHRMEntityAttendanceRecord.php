<?php

namespace DoctrineProxies\__CG__\OrangeHRM\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AttendanceRecord extends \OrangeHRM\Entity\AttendanceRecord implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'id', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'employee', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInUtcTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInNote', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInTimeOffset', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInTimezoneName', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInUserTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutUtcTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutNote', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutTimeOffset', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutTimezoneName', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutUserTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'state', 'entityDecorator'];
        }

        return ['__isInitialized__', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'id', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'employee', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInUtcTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInNote', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInTimeOffset', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInTimezoneName', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchInUserTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutUtcTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutNote', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutTimeOffset', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutTimezoneName', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'punchOutUserTime', '' . "\0" . 'OrangeHRM\\Entity\\AttendanceRecord' . "\0" . 'state', 'entityDecorator'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AttendanceRecord $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmployee(): \OrangeHRM\Entity\Employee
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmployee', []);

        return parent::getEmployee();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmployee(\OrangeHRM\Entity\Employee $employee): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmployee', [$employee]);

        parent::setEmployee($employee);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchInUtcTime(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchInUtcTime', []);

        return parent::getPunchInUtcTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchInUtcTime(?\DateTime $punchInUtcTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchInUtcTime', [$punchInUtcTime]);

        parent::setPunchInUtcTime($punchInUtcTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchInNote(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchInNote', []);

        return parent::getPunchInNote();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchInNote(?string $punchInNote): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchInNote', [$punchInNote]);

        parent::setPunchInNote($punchInNote);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchInTimeOffset(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchInTimeOffset', []);

        return parent::getPunchInTimeOffset();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchInTimeOffset(?string $punchInTimeOffset): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchInTimeOffset', [$punchInTimeOffset]);

        parent::setPunchInTimeOffset($punchInTimeOffset);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchInUserTime(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchInUserTime', []);

        return parent::getPunchInUserTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchInUserTime(?\DateTime $punchInUserTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchInUserTime', [$punchInUserTime]);

        parent::setPunchInUserTime($punchInUserTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchOutUtcTime(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchOutUtcTime', []);

        return parent::getPunchOutUtcTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchOutUtcTime(?\DateTime $punchOutUtcTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchOutUtcTime', [$punchOutUtcTime]);

        parent::setPunchOutUtcTime($punchOutUtcTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchOutNote(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchOutNote', []);

        return parent::getPunchOutNote();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchOutNote(?string $punchOutNote): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchOutNote', [$punchOutNote]);

        parent::setPunchOutNote($punchOutNote);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchOutTimeOffset(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchOutTimeOffset', []);

        return parent::getPunchOutTimeOffset();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchOutTimeOffset(?string $punchOutTimeOffset): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchOutTimeOffset', [$punchOutTimeOffset]);

        parent::setPunchOutTimeOffset($punchOutTimeOffset);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchOutUserTime(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchOutUserTime', []);

        return parent::getPunchOutUserTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchOutUserTime(?\DateTime $punchOutUserTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchOutUserTime', [$punchOutUserTime]);

        parent::setPunchOutUserTime($punchOutUserTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getState(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState(string $state): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchInTimezoneName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchInTimezoneName', []);

        return parent::getPunchInTimezoneName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchInTimezoneName(?string $punchInTimezoneName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchInTimezoneName', [$punchInTimezoneName]);

        parent::setPunchInTimezoneName($punchInTimezoneName);
    }

    /**
     * {@inheritDoc}
     */
    public function getPunchOutTimezoneName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPunchOutTimezoneName', []);

        return parent::getPunchOutTimezoneName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPunchOutTimezoneName(?string $punchOutTimezoneName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPunchOutTimezoneName', [$punchOutTimezoneName]);

        parent::setPunchOutTimezoneName($punchOutTimezoneName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDecorator(): object
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDecorator', []);

        return parent::getDecorator();
    }

}
